import com.chrynan.aaaah.buildSrc.LibraryConstants

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "maven-publish"
apply plugin: "org.jetbrains.dokka"

group LibraryConstants.group
version LibraryConstants.versionName

android {
    compileSdkVersion LibraryConstants.Android.compileSdkVersion
    defaultConfig {
        minSdkVersion LibraryConstants.Android.minSdkVersion
        targetSdkVersion LibraryConstants.Android.targetSdkVersion
        versionCode LibraryConstants.versionCode
        versionName LibraryConstants.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7"

    implementation project(":aaaah-core")
    implementation project(":aaaah-android")

    implementation "androidx.recyclerview:recyclerview:1.1.0"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

publishing {
    repositories {
        maven {
            url "https://repo.repsy.io/mvn/chrynan/public"

            credentials {
                username = project.findProperty("repsyUsername") ?: System.getenv("repsyUsername")
                password = project.findProperty("repsyToken") ?: System.getenv("repsyToken")
            }
        }
    }
    publications {
        android.libraryVariants.all { variant ->
            "maven${variant.name.capitalize()}Aar"(MavenPublication) {
                from components.findByName("android${variant.name.capitalize()}")
                groupId LibraryConstants.group
                artifactId "colors-jetpack-compose"
                version "${LibraryConstants.versionName}-${variant.name}"
            }
        }
    }
}

// Documentation
tasks.named("dokkaGfm") {
    dokkaSourceSets {
        configureEach {
            includes.from("Module.md")
        }
    }
}
